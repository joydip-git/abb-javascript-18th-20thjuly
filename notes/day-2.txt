1. callback mechanism
2. objects in JS:
	a. object literal syntax
	b. function constructor
	c. Object.create() method
	d. class keyword (ES6)
3. JS execution
4. local variable and object data in JS


function foo(){
}

function call(fnRef){
	fnRef()
}

call(foo)

1. create a function which takes an array of number type values as an argument and returns another array containing only even numbers
 

[]=>indexer
[index-number]
var value = arr[index-number]

2. create a function which will help you to convert one type of array to another type (transformation)
arguments (2): an array of any type of elements, a function which contains logic for transformation of this array
return: an array of any type of elements


[1,2,3,4] => func => ['1','2','3','4']

[1,2,3,4] => func => [5,10,15,20]

[{JSON},{JSON},{JSON}] => [{JS},{JS},{JS}]


3. create an application to calculate total salary of an employee=> js-payroll-ap
	a. create a model for employee [constructor function first, then later change it to class keyword]
		data members (value properties): name, id, basicPay, daPay, hraPay
		method (functional properties): 
				calculateSalary => calculates the total salary of an employee [add up basicPay, daPay and hraPay]
					arguments: none
					return:    calculated total salary
	b. create an array to store few employee objects
	c. create some sample employee objects and add them in the array
	d. iterate through the array, pick up one employee form the array at a time, calculate total salary and then print the total salary of the employee along with the name of the employee
	format: <name> has total salary <total-salary>





